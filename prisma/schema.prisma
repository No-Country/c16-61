// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  roles         Role      @default(user)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?

  // Se agrega una relación uno a muchos con PropertyRating
  Rating PropertyRating[]

  @@map("users")
}

model Account {
  id                       String  @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Property {
  id             String    @id @default(uuid())
  name           String    @unique // nombre de la propiedad
  coveredArea    Float // m² cubiertos
  totalLandArea  Float // m² totales de terreno
  bathrooms      Int // cantidad de baños
  bedrooms       Int // cantidad de dormitorios
  price          Float // precio del inmueble
  img            String? // imagen de la propiedad
  amenities      String[] // comodidades
  services       String[] // servicios
  nearbyPlaces   String[] // lugares de cercanía
  nearbyBusStops String[] // paradas de colectivo cercanas
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?

  // Se agrega una relación uno a muchos con PropertyRating
  Rating PropertyRating[]

  @@map("properties")
}

model PropertyRating {
  id         String    @id @default(uuid())
  rating     Int // La calificación dada por el usuario
  comment    String? // Un comentario opcional sobre la propiedad
  propertyId String // Esto establece una relación con el modelo Property
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  userId     String // Esto establece una relación con el modelo User
  user       User      @relation(fields: [userId], references: [id])
  createdAt  DateTime  @default(now()) // Fecha de creación de la calificación
  updatedAt  DateTime?

  @@map("property_ratings")
}
